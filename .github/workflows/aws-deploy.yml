# Deploy to aws
name: Deploy to AWS

# Environment variables
env:
  APP_NAME: sharparchive
  AWS_REGION: us-east-2
  AWS_CLUSTER: SharpArchiveCluster
  AWS_SERVICE: SharpArchiveService
  AWS_CONTAINER: SharpArchiveContainer
  AWS_TASK_FAMILY: SharpArchiveTaskFargate

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Configure AWS credential and region environment variables for use with the AWS CLI and AWS SDKs
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Logs in the local Docker client to one or more ECR registries
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Build the docker image and push to ECR
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.APP_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # Download the task defination from ECS
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition $AWS_TASK_FAMILY --query taskDefinition > task-definition.json

      # Get the build image ID
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.AWS_CONTAINER }}
          image: ${{ steps.build-image.outputs.image }}

      # Registers an Amazon ECS task definition, and deploys it to an ECS service
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.AWS_SERVICE }}
          cluster: ${{ env.AWS_CLUSTER }}
          wait-for-service-stability: true
